// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   String? @db.ObjectId
  admin     Admin?  @relation(fields: [adminId], references: [id])
  replies   Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  contactId String   @db.ObjectId
  contact   Contact  @relation(fields: [contactId], references: [id])
  adminId   String   @db.ObjectId
  admin     Admin    @relation(fields: [adminId], references: [id])
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String   @unique
  password  String
  role      AdminRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contacts  Contact[]
  replies   Reply[]
  articles  Article[]
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

model BruteforceAttempt {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ip            String
  userAgent     String
  fingerprint   String   // Hash unique basé sur plusieurs paramètres
  sessionId     String?
  attempts      Int      @default(0)
  lastAttempt   DateTime @default(now())
  blockedUntil  DateTime?
  isBlocked     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Informations détaillées sur l'utilisateur
  headers       Json     // Tous les headers HTTP
  browser       String?
  os            String?
  device        String?
  language      String?
  timezone      String?
  screenSize    String?
  colorDepth    Int?
  pixelRatio    Float?
  canvasFingerprint String?
  webglFingerprint String?
  
  @@index([ip])
  @@index([fingerprint])
  @@index([sessionId])
  @@index([isBlocked])
}

model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  slug        String   @unique
  imageUrl    String?
  excerpt     String?  // Résumé de l'article
  published   Boolean  @default(false) // Pour publier/dépublier
  
  // Métadonnées SEO personnalisées
  metaTitle     String?  // Titre personnalisé pour SEO
  metaDesc      String?  // Description personnalisée pour SEO
  metaKeywords  String?  // Mots-clés personnalisés pour SEO
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  adminId     String   @db.ObjectId
  admin       Admin    @relation(fields: [adminId], references: [id])
  comments    Comment[]
  ratings     Rating[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  authorName  String   // Nom de l'auteur (pas d'authentification)
  authorEmail String?  // Email optionnel
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articleId   String   @db.ObjectId
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Rating {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int       // Nombre d'étoiles (1-5)
  authorName  String    // Nom de l'auteur (pas d'authentification)
  authorEmail String?   // Email optionnel
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  articleId   String    @db.ObjectId
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
}